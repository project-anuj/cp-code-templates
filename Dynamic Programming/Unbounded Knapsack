........................................... Rod Cutting Problem .................................................

#include<bits/stdc++.h>
using namespace std;
#define MAX 100

int RodCuttingProblem(int length[MAX],int price[MAX],int n,int N)
{
	int dp[n+1][N+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=N;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=N;j++)
		{
			if(length[i-1]>j)
			dp[i][j]=dp[i-1][j];
			else
			dp[i][j]=max(price[i-1]+dp[i][j-length[i-1]],dp[i-1][j]);
		}
	}
	return dp[n][N];
}
int main()
{
	int n;
	cin>>n;
	int length[n];
	for(int i=0;i<n;i++)
	cin>>length[i];
	int price[n];
	for(int i=0;i<n;i++)
	cin>>price[i];
	int N;
	cin>>N;
	cout<<RodCuttingProblem(length,price,n,N);
}

...........................................Coin Change Problem: Maximum number of ways.................................................

#include<bits/stdc++.h>
using namespace std;
#define MAX 100

int CoinChange(int coin[MAX],int n,int sum)
{
	int dp[n+1][sum+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=sum;j++)
		{
			if(i==0)
			dp[i][j]=0;
			if(j==0)
			dp[i][j]=1;
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=sum;j++)
		{
			if(coin[i-1]>j)
			dp[i][j]=dp[i-1][j];
			else
			dp[i][j]=dp[i][j-coin[i-1]]+dp[i-1][j];
		}
	}
	return dp[n][sum];
}
int main()
{
	int n;
	cin>>n;
	int coins[n];
	for(int i=0;i<n;i++)
	cin>>coins[i];
	int sum;
	cin>>sum;
	cout<<CoinChange(coins,n,sum);
}

......................................Coin Change Problem : Minimum number of Coins........................................

#include<bits/stdc++.h>
using namespace std;
#define MAX 100

int CoinChange(int coin[MAX],int n,int sum)
{
	int dp[n+1][sum+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=sum;j++)
		{
			if(j==0)
			dp[i][j]=0;
			if(i==0)
			dp[i][j]=INT_MAX-1;
			if(i==1 && j>0)
			if(i%coin[i-1]==0)
			dp[i][j]=i/coin[i-1];
			else
			dp[i][j]=INT_MAX-1;
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=sum;j++)
		{
			if(coin[i-1]>j)
			dp[i][j]=dp[i-1][j];
			else
			dp[i][j]=min(dp[i][j-coin[i-1]]+1,dp[i-1][j]);
		}
	}
	return dp[n][sum];
}
int main()
{
	int n;
	cin>>n;
	int coins[n];
	for(int i=0;i<n;i++)
	cin>>coins[i];
	int sum;
	cin>>sum;
	cout<<CoinChange(coins,n,sum);
}
