Approach to write DP
    Recursion => Memoization (In some cases stack may become full ) => Top Down
    
////////////////////////////////////////////// KnapSack /////////////////////////////////////////////////

3 types-
    1) Unbounded Knapsack
    2) 0/1 knapsack
    3) Fractional Knapsack (Greedy Approach)
//////////////////////////////////////////// 0/1 knapsack ///////////////////////////////////////////////

..................
    Recursive
..................

#include<bits/stdc++.h>
using namespace std;
#define MAX 100

int knapsack(int wt[MAX],int val[MAX],int n,int W)
{
	if(n==0||W==0)
	return 0;
	if(wt[n-1]>W)
	return knapsack(wt,val,n-1,W);
	else
	return max(knapsack(wt,val,n-1,W),val[n-1]+knapsack(wt,val,n-1,W-wt[n-1]));
}
int main()
{
	int n;
	cin>>n;
	int wt[n],val[n];
	for(int i=0;i<n;i++)
	cin>>wt[i];
	for(int i=0;i<n;i++)
	cin>>val[i];
	int W;
	cin>>W;
	cout<<knapsack(wt,val,n,W);
}

...................
    Memoization
...................

int dp[MAX][MAX];
int knapsack(int wt[MAX],int val[MAX],int n,int W)
{
	if(n==0||W==0)
	return 0;
    if(dp[n][W]!=-1)
    return dp[n][W];
	if(wt[n-1]>W)
	return dp[n][W]=knapsack(wt,val,n-1,W);
	else
	return dp[n][W] = max(knapsack(wt,val,n-1,W),val[n-1]+knapsack(wt,val,n-1,W-wt[n-1]));
}

.........................
        Top Down
.........................

int knapsack(int wt[MAX],int val[MAX],int n,int W)
{
	int dp[n+1][W+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=W;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
			
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=W;j++)
		{
			if(wt[i-1]>j)
			dp[i][j] = dp[i-1][j];
			else
			dp[i][j] = max(dp[i-1][j],val[i-1]+dp[i-1][j-wt[i-1]]);	
		}
	}
	return dp[n][W];
}

.................................................... Subset Sum Problem ................................................

