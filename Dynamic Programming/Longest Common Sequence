Basic Problems:-
1) Longest Common SubString
2) Print LCS
3) Shortest Common SuperSequence
4) Print SCS
5) Min no of insertion and deletion 'a' -> 'b'
6) Longest Repeating Subsequence
7) Length of Largest SubSequence of 'a' which is a substring in 'b'
8) Subsequence Pattern Matching
9) Count how many times 'a' appears as subsequence in 'b'
10) Longest Palindromic Subsequence
11) Longest Palindromic SubString
12) Count of Palindromic Substring
13) Min no of Deletion in a string to make it a Palindrome
14) Min no of Insertion in a string to make it a Palindrome


..............................................Longest Common SubSequence......................................................
.................
    Recursive
.................
#include<bits/stdc++.h>
using namespace std;

int LCS(string x,string y,int m,int n)
{
	if(m==0||n==0)
	return 0;
	if(x[m-1]==y[n-1])
	return 1+LCS(x,y,m-1,n-1);
	else
	return max(LCS(x,y,m-1,n),LCS(x,y,m,n-1));
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<LCS(x,y,x.length(),y.length());
}

....................
    Memoization
....................

#include<bits/stdc++.h>
using namespace std;
#define MAX 100
int static dp[MAX][MAX];

int LCS(string x,string y,int m,int n)
{
	if(m==0||n==0)
	return 0;
	if(dp[m][n]!=-1)
	return dp[m][n];
	if(x[m-1]==y[n-1])
	return dp[m][n] = 1+LCS(x,y,m-1,n-1);
	else
	return dp[m][n] = max(LCS(x,y,m-1,n),LCS(x,y,m,n-1));
}
int main()
{
	memset(dp,-1,sizeof(dp));
	string x,y;
	cin>>x>>y;
	cout<<LCS(x,y,x.length(),y.length());
}

..................
     Top-Down
..................

#include<bits/stdc++.h>
using namespace std;

int LCS(string x,string y,int m,int n)
{	
	int dp[m+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			dp[i][j]=1+dp[i-1][j-1];
			else
			dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[m][n];
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<LCS(x,y,x.length(),y.length());
}

..............................................Longest Common SubString....................................................

#include<bits/stdc++.h>
using namespace std;

int LCSubstring(string x,string y,int m,int n)
{
	int dp[m+1][n+1];
	int max_length=0;
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0 || j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			{
				dp[i][j]=dp[i-1][j-1]+1;
				max_length=max(max_length,dp[i][j]);
			}
			else
			dp[i][j]=0;
		}
	}
	return max_length;
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<LCSubstring(x,y,x.length(),y.length());
}

..............................................Printing Longest Common SubSequence...............................................

#include<bits/stdc++.h>
using namespace std;

string  LCSubSequence(string x,string y,int m,int n)
{
	int dp[m+1][n+1];
	string res="";
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0 || j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			{
				dp[i][j]=1+dp[i-1][j-1];
			}
			else
			dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	int i=m,j=n;
	while(i>0 && j>0)
	{
		if(x[i-1]==y[j-1])
		{
			res+=x[i-1];
			i--;
			j--;
		}
		else if(dp[i-1][j]>dp[i][j-1])
		{
			i--;
		}
		else
		j--;
	}
	reverse(res.begin(),res.end());
	return res;
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<LCSubSequence(x,y,x.length(),y.length());
}

...............................................length of Shortest Common SuperSequence...................................................
// (length of x + length of y) - length of longest common sequence

#include<bits/stdc++.h>
using namespace std;

int SCS(string x,string y,int m,int n)
{
	int dp[m+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			{
				dp[i][j]=1+dp[i-1][j-1];
			}
			else
			dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[m][n];
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<x.length()+y.length()-SCS(x,y,x.length(),y.length());
}

.............................. Min no of insertions and deletions to convert string A to string B ................................

#include<bits/stdc++.h>
using namespace std;

int SCS(string x,string y,int m,int n)
{
	int dp[m+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			{
				dp[i][j]=1+dp[i-1][j-1];
			}
			else
			dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[m][n];
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<x.length()+y.length()-2*SCS(x,y,x.length(),y.length());
}

..............................................Longest Palindromic SubSequence................................................

#include<bits/stdc++.h>
using namespace std;

int LongestPalindromicSubSequence(string x,string y)
{
	int m=x.length();
	int n=y.length();
	int dp[m+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
				dp[i][j]=1+dp[i-1][j-1];
			else
				dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[m][n];
}
int main()
{
	string s,s1;
	cin>>s;
	s1=s;
	reverse(s1.begin(),s1.end());
	cout<<LongestPalindromicSubSequence(s,s1);
}

.................................... Min no of deletion in a string to make it a palindrome .......................................

#include<bits/stdc++.h>
using namespace std;

int LongestPalindromicSubSequence(string x,string y)
{
	int m=x.length();
	int n=y.length();
	int dp[m+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
				dp[i][j]=1+dp[i-1][j-1];
			else
				dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[m][n];
}
int main()
{
	string s,s1;
	cin>>s;
	s1=s;
	reverse(s1.begin(),s1.end());
	cout<<s.length()-LongestPalindromicSubSequence(s,s1);
}

............................................ Print shortest common Supersequence ............................................

#include<bits/stdc++.h>
using namespace std;

string PrintSCS(string x,string y)
{
	int m=x.length();
	int n=y.length();
	int dp[m+1][n+1];
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
				dp[i][j]=1+dp[i-1][j-1];
			else
				dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	int i=m;
	int j=n;
	string res="";
	while(i>0 && j>0)
	{
		if(x[i-1]==y[j-1])
		{
			res+=x[i-1];
			i--;
			j--;
		}
		else if(dp[i-1][j]>dp[i][j-1])
		{
			res+=x[i-1];
			i--;
		}
		else
		{
			res+=y[j-1];
			j--;
		}
	}
	while(i>0)
	{
		res+=x[i-1];
		i--;
	}
	while(j>0)
	{
		res+=y[j-1];
		j--;
	}
	reverse(res.begin(),res.end());
	return res;
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<PrintSCS(x,y);
}

................................................... Longest Repeating SubSequence ........................................................

Here, Subsequence is in an Order but may be discontinuous
e.g. in "AABEBCDD" , "ABD" is longest repeating subsequence

#include<bits/stdc++.h>
using namespace std;

int LongestRepeatingSubSequence(string x)
{
	string y=x;
	int n=x.length();
	int dp[n+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1] && i!=j)
			dp[i][j]=1+dp[i-1][j-1];
			else
			dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[n][n];
}
int main()
{
	string x;
	cin>>x;
	cout<<LongestRepeatingSubSequence(x);
}

................................................... Sequence Pattern Matching .........................................................

#include<bits/stdc++.h>
using namespace std;

int LongestRepeatingSubSequence(string x,string y)
{
	int m=x.length();
	int n=y.length();
	int l=min(m,n);
	int dp[m+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			dp[i][j]=1+dp[i-1][j-1];
			else
			dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
		}
	}
	if(dp[m][n] == l)
	return true;
	else
	return false;
}
int main()
{
	string x,y;
	cin>>x>>y;
	cout<<LongestRepeatingSubSequence(x,y);
}

......................................... Min No of insertion in a string to make it a palindrome ...........................................

#include<bits/stdc++.h>
using namespace std;

int LongestCommonSubSequence(string x,string y)
{
	int n=x.length();
	int dp[n+1][n+1];
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=n;j++)
		{
			if(i==0||j==0)
			dp[i][j]=0;
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(x[i-1]==y[j-1])
			dp[i][j]=1+dp[i-1][j-1];
			else
			dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
		}
	}
	return dp[n][n];
}
int main()
{
	string x,y;
	cin>>x;
	y=x;
	reverse(x.begin(),x.end());
	cout<<x.length()-LongestCommonSubSequence(x,y);
}
