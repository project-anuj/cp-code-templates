///////////////////////////////////Binary Left and Right Shift//////////////////////////////////////////
...................................Left Shift....................................
n = n << i  (n=n*(2^i))

...................................Right Shift....................................
n = n >> i  (n = n/(2^i))(integer division)

..........................Checking for ith Set Bit...............................

cin >> n >> i;
int f = 1;
f = f << i;
int res= n & f;
if(res==0)
    cout<<"false"<<endl;
else
    cout<<"true"<<endl;

............................ Counting No of Set Bits (also known as the Hamming weight)...............................

.................................
            log(n)
.................................

cin >> n;
int count = 0;
while(n > 0)
{
    if((n & 1) > 0) count++;
    n = n >> 1;
}
cout<< count <<endl;

...........................................................
        log(n) (little bit faster than above)
...........................................................

Observation.....
    8 - 1 = 7       16 - 1 = 15         28 - 1 =27
    0 1 0 0 0       1 0 0 0 0           1 1 1 0 0
    0 0 0 0 1       0 0 0 0 1           0 0 0 0 1
    .........       .........           .........
    0 0 1 1 1       0 1 1 1 1           1 1 0 1 1
    .........       .........           .........
    
    to find n-1 , change the right most set bit to 0 and rest remain same.
    let...
            n = 0 0 1 0 0 0 0 0
         & n-1= 0 0 0 1 1 1 1 1
               .................
                0 0 0 0 0 0 0 0
               .................
     
    int cnt = 0;
    while(n > 0)
    {
        cnt++;
        n = n & (n-1);
    }
    cout<< cnt <<endl;
    
/////////////////////////////////////////// Xor and it's properties /////////////////////////////////////////////////////

A XOR B = A^B
................
1. Identity Element
    0^A = A

2. A ^ A = 0

3. Ordering of XOOR doesn't matter
      2^3^1 = (2^3)^1
            = 2^(1^3)
            = 3^(1^2)
            
