✔ Bitwise operators...

1) NOT(~) :-Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but 
    simply the one’s complement of a number. Lets take an example.
    N = 5 = 101
    ~N = ~5 = ~(101) = 010 = 2

2) AND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the
    resulting bit pattern is 1, otherwise 0.
    A = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1

3) OR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit 
    patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.
    A = 5 = (101)2 , B = 3 = (011)2
    A | B = (101)2 | (011)2 = (111)2 = 7

4) XOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern
    is 0, otherwise 1.
    A = 5 = (101)2 , B = 3 = (011)2
    A ^ B = (101)2 ^ (011)2 = (110)2 = 6

5) Left Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is
    equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).

6) Right Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end.


....................................................Power of 2.....................................................
............................................
            Naive(O(log(n))
............................................
 bool isPowerOfTwo(int x)
    {
        if(x == 0)
            return false;
        else
        {
            while(x % 2 == 0) x /= 2;
            return (x == 1);
            }
    }
.............................................
                    O(1)
.............................................

bool isPowerOfTwo(int n) {
       if(n<=0)
           return false;
        return !(n & (n-1));
    }


///////////////////////////////////////////////////////Binary Left and Right Shift/////////////////////////////////////////////////////////////


...................................Left Shift....................................
n = n << i  (n=n*(2^i))

...................................Right Shift....................................
n = n >> i  (n = n/(2^i))(integer division)

..........................Checking for ith Set Bit...............................

cin >> n >> i;
int f = 1;
f = f << i;
int res= n & f;
if(res==0)
    cout<<"false"<<endl;
else
    cout<<"true"<<endl;

.................................
                OR
.................................
if(n & (1 << i ))
    cout<<"true";
else
    cout<<"false";
............................ Counting No of Set Bits (also known as the Hamming weight)...............................

.................................
            log(n)
.................................

cin >> n;
int count = 0;
while(n > 0)
{
    if((n & 1) > 0) count++;
    n = n >> 1;
}
cout<< count <<endl;

...........................................................
Complexity: O(K), where K is the number of ones present in the binary form of the given number.
        log(n) (in worst case)
...........................................................

Observation.....
    8 - 1 = 7       16 - 1 = 15         28 - 1 =27
    0 1 0 0 0       1 0 0 0 0           1 1 1 0 0
    0 0 0 0 1       0 0 0 0 1           0 0 0 0 1
    .........       .........           .........
    0 0 1 1 1       0 1 1 1 1           1 1 0 1 1
    .........       .........           .........
    
    to find n-1 , change the right most set bit to 0 and rest remain same.
    let...
            n = 0 0 1 0 0 0 0 0
         & n-1= 0 0 0 1 1 1 1 1
               .................
                0 0 0 0 0 0 0 0
               .................
     
    int cnt = 0;
    while(n > 0)
    {
        cnt++;
        n = n & (n-1);
    }
    cout<< cnt <<endl;
    
/////////////////////////////////////////// Xor and it's properties /////////////////////////////////////////////////////

A XOR B = A^B
................
1. Identity Element
    0^A = A

2. A ^ A = 0

3. Ordering of XOOR doesn't matter
      2^3^1 = (2^3)^1
            = 2^(1^3)
            = 3^(1^2)
            
///////////////////////////////////////////////All Pair Sum XOR////////////////////////////////////////////////////////// 

Given an array with n elements, calculate following
(A1 + A1)^(A1 + A2)^(A1 + A3)^......^(A1 + An)^
(A2 + A1)^(A2 + A2)^(A2 + A3)^......^(A2 + An)^
(A3 + A1)^(A3 + A2)^(A3 + A3)^......^(A3 + An)^
.
.
(An + A1)^(An + A2)^(An + A3)^......^(An + An)

(Naive approach will take O(n^2))

Observation..............
    let.....
            4 3 9 1
                    
                    8  7  13  5
                    7  6  12  4
                    13 12 18 10
                    5  4  10  2
                    (XOR of 2*a[i] i.e. diagonal elements only ,in O(n))
     

//////////////////////////////////////////////////Total Sum of all Pairs XOR ///////////////////////////////////////////////////

Given an array with n elements, calculate following
    (A1 ^ A2)+(A1 ^ A3)+(A1 ^ A4)+........+(A1 ^ An)^+
              (A2 ^ A3)+(A2 ^ A4)+........+(A2 ^ An)^+
                                                    '
                                                    '
                                                    '
                                           (An-1 ^ An)
                                           
 ..............................Naive approach O(n^2).............................
    int res=0;
    for(int i=1;i<=n;i++)
    {
        for(int j=i+1;j<=n;j++)
        {
            res += ar[i]^ar[j];
        }
    }
 ................................................................................
 
 Observation........
        let...
           5        3       9
           0101     0011    1001
           
           5^3 = 0110
           5^9 = 1100
           3^9 = 1010
           Total Sum = 0*(2^0)+2*(2^1)+2*(2^2)+2*(2^3)=28
           
           Here , no. of set bits at ith bit only contribute to the sum
           No of pairs with ith bit set = (no of elements with ith bit 1)*(no of elements with ith bit 0)
           
           code.....(O(nlog(n))
                    
                    int ar[10001];
                    int n,res=0;
                    cin>>n;
                    for(int i=1;i<=n;i++)
                    cin>>ar[i];
                    
                    for(int i=0;i<31;i++)           //(Assume 32 bit integer)
                    {
                        int cnt0=0, cnt1=0;
                        
                        for(int j=1;j<=n;j++)
                        {
                            if(ar[j] & (1 << i))     //(ith bit set)
                            cnt1++;
                            else
                            cnt0++;
                        }
                        int p = cnt0 * cnt1;
                        res +=(1<<i)*p;
                    }
                    cout<<res<<endl;
 
 /////////////////////////////////////////////////to generate all the possible subsets of a set////////////////////////////////////////////////////
    
    
    there are 2N possible subsets of any given set with N elements. there are 2N possible subsets of any given set with N elements.
    we represent each element in a subset with a bit. A bit can be either 0 or 1, thus we can use this to denote whether the corresponding element belongs to this given subset
    or not. So each bit pattern will represent a subset.

    Consider a set A of 3 elements.
    A = {a, b, c}

    Now, we need 3 bits, one bit for each element. 1 represent that the corresponding element is present in the subset, whereas 0 represent the corresponding element is not in 
    the subset. Let’s write all the possible combination of these 3 bits.

0 = (000)2 = {}
1 = (001)2 = {c}
2 = (010)2 = {b}
3 = (011)2 = {b, c}
4 = (100)2 = {a}
5 = (101)2 = {a, c}
6 = (110)2 = {a, b}
7 = (111)2 = {a, b, c}
 
 #include<bits/stdc++.h>
using namespace std;

void possibleSubsets(char a[],int n)
{
	for(int i=0;i<(1<<n);i++)
	{
		for(int j=0;j<n;j++)
		{
			if(i & (1<<j))
			cout<<a[j]<<" ";
		}
		cout<<endl;
	}
}
int main()
{
	char a[]={'a','b','c'};
	possibleSubsets(a,3);
}
 
 
 //////////////////////////////Find the largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N.////////////////////////////
 
 Idea: Change all the bits which are at the right side of the most significant digit, to 1.
 
 long largest_power(long N)
    {
        //changing all right side bits to 1.
        N = N| (N>>1);
        N = N| (N>>2);
        N = N| (N>>4);
        N = N| (N>>8);


    //as now the number is 2 * x-1, where x is required answer, so adding 1 and dividing it by
     2. 
                return (N+1)>>1;

    }
 
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Tricks with Bits:

1) x ^ ( x & (x-1)) : Returns the rightmost 1 in binary representation of x.
    e.g.
    x = 10 = (1010)2 ` x & (x-1) = (1010) & (1001) = (1000)
    x ^ (x & (x-1)) = (1010) ^ (1000) = (0010)
 
2) x & (-x) : Returns the rightmost 1 in binary representation of x
    
    e.g.
        x = 10 = (1010)
        (-x) = -10 = (0110)
        x & (-x) = (1010) & (0110) = 0010
 
 
 3) x | (1 << n) : Returns the number x with the nth bit set.
    e.g.
        x = 10 = (1010)2 n = 2
        1 << n = (0100)
        x | (1 << n) = (1010) | (0100) = (1110)

























