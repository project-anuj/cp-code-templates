______________________________________________________________________________
                  Sliding Window string matching technique 
______________________________________________________________________________
-----------------------------------------------
|Text| = N;
|Pat| = M;
Total windows to match     : N-M+1
Matching time for 1 window : M
Time complexity            : N*M - M*M + M
for large text and small pattern   : O(N*M)
-----------------------------------------------


#include<bits/stdc++.h>
using namespace std;

string text,pat;
int Lt,Lp;

bool match(int L)
{
	for(int i=0;i<Lp;i++)
	if(text[L+i]!=pat[i])
	return false;
	return true;
}
int main()
{
	int t;
	cin>>t;
	cin.ignore();
	while(t--)
	{
		getline(cin,text);
		getline(cin,pat);
		Lt = text.length();
		Lp = pat.length();
		
		for(int L=0,R=L+Lp-1;R<Lt;L++,R++)
		if(match(L)==true)
		cout<<L<<" ";
		cout<<endl;
	}
}

____________________________________________________________________________________________________________________________________________
			Polynomial Rolling Hashing (string matching algorithm, just compare their hash values in O(1) time
____________________________________________________________________________________________________________________________________________

For two strings A & B , finding Hash will take O(max(|A|,|B|))
--------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define lli long long int

lli getHash(string key)
{
	lli value=0;
	lli p=31;
	lli p_power = 1;
	int n=key.length();
	for(int i=0;i<n;i++)
	{
		value = (value + (key[i] - 'a' + 1)*p_power)%mod;
		p_power = (p_power * p)%mod;
	}
	return value;
}
int main()
{
	bool flag = 1;
	while(flag)
	{
		string key;
		cout<<"enter key"<<endl;
		cin>>key;
		
		if(key == ".")
		flag = false;
		else
		cout<<"Key : "<<key<<"Hash : "<<getHash(key)<<endl;
	}
}


______________________________________________________________________________
		Calculating Hash value of substring in O(1)
______________________________________________________________________________
#include<bits/stdc++.h>
#define REP(i,n) for(int i=1;i<=n;i++)
#define mod 1000000007
#define pb push_back
#define ff first
#define ss second
#define ii pair<int,int>
#define vi vector<int>
#define vii vector<ii>
#define lli long long int
#define INF 1000000000
using namespace std;
lli dp[1000001];
lli inv[1000001];

lli power(lli a,lli n)
{
	lli result = 1;
	while(n)
	{
		if(n&1) result = (result * a)%mod;
		n>>=1;
		a = (a*a)%mod;
	}
	return result;
}

void init(string input_string)
{
	lli p =31;
	lli p_power = 1;
	inv[0]=1;
	dp[0] = (input_string[0]-'a'+1);
	
	for(int i=1;i<input_string.size();i++)
	{
		char ch = input_string[i];
		
		p_power = (p_power*p)%mod;
		inv[i] = power(p_power,mod - 2);
		
		dp[i] = (dp[i-1]+(ch-'a'+1)*p_power)%mod;
	}
}
lli substringHash(int L,int R)
{
	int result =dp[R];
	if(L>0) result -= dp[L-1];
	
	result = (result * inv[L])%mod;
	return result;
}

int main()
{
	string  input_string;
	int tc,L,R;
	
	cin>> input_string;
	init(input_string);
	
	cin>>tc;
	
	while(tc--)
	{
		cin>>L>>R;
		cout<<substringHash(L,R)<<endl;
	}
}

______________________________________________________________________________
		 Rabin - Karp String matching algorithm O(m+n)
______________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;
#define lli long long int
#define mod 1000000007

lli dp[1000001];
lli power[1000001];

void init(string text)
{
	lli p=31;
	lli p_power=1;
	power[0]=1;
	dp[0]=text[0]-'a'+1;
	
	for(int i=1;i<text.length();i++)
	{
		char ch = text[i];
		p_power = (p_power*p)%mod;
		dp[i]=(dp[i-1]+(ch-'a'+1)*p_power)%mod;
		power[i]=p_power;
	}
}
lli getHash(string key)
{
	lli value = 0;
	lli p = 31;
	lli p_power =1;
	for(int i=0;i<key.size();i++)
	{
		value = (value + (key[i]-'a'+1)*p_power)%mod;
		p_power = (p_power * p)%mod;
	}
	return value;
}
int main()
{
	int Lt,Lp;
	string text,pat;
	getline(cin,text);
	getline(cin,pat);
	init(text);
	
	Lt = text.length();
	Lp = pat.length();
	lli patHash= getHash(pat);
	for(int L=0,R=L+Lp-1;R<Lt;L++,R++)
	{
		lli subHash = L==0? dp[R] : dp[R]-dp[L-1];
		if((patHash*power[L])%mod==subHash)
		{
		 cout<<L;
		 cout<<endl;
		}		
	}
}

______________________________________________________________________________
		 No of different substrings in a string  O(n*n log(n))
______________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define lli long long int

lli dp[1000001];
lli power[1000001];

lli init(string s)
{
	lli p=31;
	int n=s.length();
	
	power[0]=1;
	for(int i=1;i<n;i++)
	power[i] = (power[i-1]*p)%mod;
	
	dp[0]=0;
	for(int i=0;i<n;i++)
	dp[i+1]=(dp[i]+(s[i]-'a'+1)*power[i])%mod;
	
	int cnt=0;
	for(int l=1;l<=n;l++)
	{
		set<lli> hs;
		for(int i=0;i<=n-l;i++)
		{
			lli cur_h = (dp[i+l]-dp[i]+mod)%mod;
			cur_h = (cur_h*power[n-i-1])%mod;
			hs.insert(cur_h);
		}
		cnt+=hs.size();
	}
	return cnt;
}
int main()
{
	string s;
	cin>>s;
	cout<<"The no of different substrings in a string = "<<init(s);
}
