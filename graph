//////////////////////////////////////////////////////////////// DFS //////////////////////////////////////////////////////////////////////

//...................................print dfs..................................
vector<int> ar[100001];
int visited[100001];
void dfs(int node)
{
    visited[node]=1;
    cout<<node<<" " ;
    for(auto child : ar[node])
    {
        if(visited[child]==0)
        {
          dfs(child);
        }
    }
}

//.............................no of connected components.........................

int cc_count=0;
for(int i=1;i<=n;i++)
{
    if(visited[i]==0)
    dfs(i),cc_count++;
}
cout<<"no of connected components are "<<cc_count;

//...........................sssp using dfs....................................

vector<int> ar[10001];
int visited[10001];
int dist[10001];

void dfs(int node,int d)
{
    visited[node]=1;
    dist[node]=d;
    for(int child : ar[node])
    {
        if(visited[child] == 0)
        {
            dfs(child,dist[node]+1);
        }
    }
}
int main()
{
  dfs(1,0)
}

//.......................Bipartite graph Test.............................

vector<int> ar[10001];
int visited[10001];
int col[10001];
bool dfs(int v,int c)
{
    visited[v] = 1;
    col[v] = c;
    
    for(int child: ar[v])
    {
        if(vis[child] == 0)
        {
            if(dfs(child,c^1) == false)
            {
                return false;
            }
        }
        else
        {
            if(col[v] == col[child])
            return false;
        }
    }
    return true;
}

//.......................cycle detection in graph using DFS........................
(returns true if there is cycle otherwise returns false)
bool dfs(int node, int par)
{
    visited[node]=1;
    
    for(int child: ar[node])
    {
        if(visited[child] == 0)
        {
            if(dfs(child,node) == true)
            {
                return true;
            }
        }
        else
        {
            if(child != par)
            return true;
        }
    }
    return false;
}

//.........................In/Out time implementation..............................

int timer=1;
bool dfs(int v)
{
    visited[v]=1;
    In[v] = timer++;
    
    for(int child : ar[v])
    {
        if(visited[child] == 0)
        dfs(child);
    }
    Out[v] = timer++;
}

//.........................finding the diameter of Tree...............................

vector<int> ar[10001];
int visited[10001];

int maxD,maxNode;

void dfs(int node, int d)
{
    visited[node]=1;
    if(d>maxD) maxD=d, maxNode=node;
    for(int child: ar[node])
    if(visited[child] == 0)
    dfs(child, d+1);
}
int main()
{
    maxD = -1;
    dfs(1,0);
    REP(i,n) visited[i]=0;
    maxD = -1;
    dfs(maxNode, 0);
    cout<<MaxD<<endl;
}

//.............................calculating subtree size using DFS in O(N).......................

int visited[100001],subSize[100001];
int dfs(int node)
{
    visited[node] =1;
    int curr_size = 1;
    for(int child : ar[node])
    {
        if(visited[child] == 0)
        {
            curr_size + = dfs(child);
        }
    }
    subSize[node] = curr_size;
    return curr_size;
}


////////////////////////////////////////////////////////////////// BFS /////////////////////////////////////////////////////////////////////////////

//..............................min distance of each node from source node....................................
void bfs(int src)
{
    queue<int> q;
    q.push(src);
    visited[src]=1;
    dist[src]=0;
    while(q.size()>0)
    {
        int curr = q.front();
        q.pop();
        
        for(int child : ar[curr])
        {
            if(visited[child] == 0)
            {
                q.push(child);
                dist[child] = dist[curr] + 1;
                visited[child] = 1;
            }
        }
    }
}

//////////////////////////////////////////////////////////////////finding Bridges /////////////////////////////////////////////////////////////////////

vector<int> ar[10001];
int In[10001],low[10001],visited[10001];
int timer;

void dfs(int node,int par)
{
	visited[node]=1;
	In[node]=low[node]=timer;
	timer++;
	
	for(auto child : ar[node])
	{
		if(child==par)
		continue;
		if(visited[child]==1)
		{	// edge node-child is a back edge
			low[node]=min(low[node],In[child]);
		}
		else
		{	// edge node-child is a forward edge
			dfs(child,node);
	
			if(low[child]>In[node])
			cout<<node<<" - "<<child<<" is a bridge"<<endl;
			low[node] = min(low[node],low[child]);
		}
	}
}
int main()
{
	dfs(1,-1);
}

//////////////////////////////////////////////////////////Articulation points (cut vertex)/////////////////////////////////////////////////////////////

vector<vector<int>> adj; // adjacency list of graph

vector<bool> visited;
vector<int> tin, low;
int timer;

void dfs(int v, int p = -1) {
    visited[v] = true;
    tin[v] = low[v] = timer++;
    int children=0;
    for (int to : adj[v]) {
        if (to == p) continue;
        if (visited[to]) {
            low[v] = min(low[v], tin[to]);
        } else {
            dfs(to, v);
            low[v] = min(low[v], low[to]);
            if (low[to] >= tin[v] && p!=-1)
                IS_CUTPOINT(v);
            ++children;
        }
    }
    if(p == -1 && children > 1)
        IS_CUTPOINT(v);
}

////////////////////////////////////////////////////////////TOPOLOGICAL SORT/////////////////////////////////////////////////////////////////////////

............................Kahn's Algorithm (V+E)...............................

#include<bits/stdc++.h>
using namespace std;

vector<int> ar[100];
vector<int> res;
int in[100];

void kahn(int n)
{
	queue<int> q; // ( for sorted order use priority_queue)
	for(int i=1;i<=n;i++)
	if(in[i]==0)
	q.push(i);
	
	while(q.size()>0)
	{
		int curr = q.front();
		res.push_back(curr);
		q.pop();
		
		for(int node : ar[curr])
		{
			in[node]--;
			if(in[node]==0)
				q.push(node);
		}
	}
	cout<<"Topological Sort is : ";
	for(int node : res)
	cout<<node<<" ";
}
int main()
{
	int n,m,x,y;
	cin>>n>>m;
	for(int i=0;i<m;i++)
	{
		cin>>x>>y;
		ar[x].push_back(y);
		in[y]++;
	}
	kahn(n);
}

//////////////////////////////////////////////////////////Apply DFS on 2D grid///////////////////////////////////////////////////////////
.....................................
1. cell = node
2. sides = edges
3. sides + corner = edges (in some cases) 
.....................................

int n,m;
int visited[10001];
bool isValid(int x, int y)
{
	if(x<1 || x>n || y<1 || y>M)
	return false;
	if(visited[x][y]== true)
	return false;
	
	return true;
}
void dfs(int x, int y)
{
	visited[x][y]=1;
	cout<<x<<" " <<y<<endl;
	if(isValid(x-1,y))
	dfs(x-1,y);
	
	if(isValid(x,y+1))
	dfs(x,y+1);
	
	if(isValid(x+1,y))
	dfs(x+1,y);
	
	if(isValid(x,y-1))
	dfs(x,y-1);
}
int main()
{
	cin>>n>>m;
	dfs(1,1);
}
....................................................
			OR
....................................................

int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
void dfs(int x,int y)
{
	visited[x][y]=1;
	cout<<x<<" " <<y<<endl;
	
	for(int i=0;i<4;i++)
	if(isValid(x+dx[i], y+dy[i]))
	dfs(x+dx[i],y+dy[i]);
}

..................................Counting Connected Components in Grid...........................................

#include<bits/stdc++.h>
using namespace std;

int n,m;
int ar[100][100];
int visited[100][100];

bool isValid(int x,int y)
{
	if(x<1 || x>n ||y<1 || y>m)
	return false;
	
	if(visited[x][y] == true|| ar[x][y] == 0)
	return false;
	
	return true;	
}
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
	
void dfs(int x,int y)
{
	visited[x][y]=1;	
	for(int i=0;i<4;i++)
		if(isValid(x+dx[i],y+dy[i]))
			dfs(x+dx[i],y+dy[i]);	
}
int main()
{
	cin>>n>>m;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			cin>>ar[i][j];	
			
	int count=0;
	for(int i=1;i<=n;i++)
	for(int j=1;j<=m;j++)
	if(visited[i][j]==0 && ar[i][j]==1)
	dfs(i,j),count++;
	cout<<"no of connected components = "<<count<<endl;
}

/*
0 0 1 0 1 1
0 1 1 0 0 1
0 1 0 0 0 0
1 0 1 1 0 0
0 0 0 1 0 0
0 1 1 0 1 1
no of connected components = 6
*/

////////////////////////////////////////////////////Apply BFS on 2D grid////////////////////////////////////////////////////////

#include<bits/stdc++.h>
using namespace std;

int n,m;
int ar[1001][1001];
int visited[1001][1001];
int dist[1001][1001];

bool isValid(int x,int y)
{
	if(x<1 || x>n ||y<1 ||y>m)
	return false;
	
	if(visited[x][y]==1)
	return false;
	
	return true;
}
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
void bfs(int srcX,int srcY)
{
	queue<pair<int,int>> q;
	q.push({srcX,srcY});
	visited[srcX][srcY]=1;
	dist[srcX][srcY]=0;
	
	while(q.size()>0)
	{
		pair<int,int> curr= q.front();
		q.pop();
		int currX=curr.first;
		int currY=curr.second;
		
		for(int i=0;i<4;i++)
		if(isValid(currX+dx[i],currY+dy[i]))
		{
			int newX=currX+dx[i];
			int newY=currY+dy[i];
			q.push({newX,newY});
			visited[newX][newY]=1;
			dist[newX][newY]=dist[currX][currY]+1;
		}
	}
	cout<<"Distance array is \n";
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
		cout<<dist[i][j]<<" ";
		cout<<endl;
	}
	
}
int main()
{
	cin>>n>>m;
	int x,y;
	cin>>x>>y;
	bfs(x,y);
}

/*
4 4
1 1
Distance array is
0 1 2 3
1 2 3 4
2 3 4 5
3 4 5 6
*/

/////////////////////////////////////////Kosaraju's Algorithm for Strongly Connected Component/////////////////////////////////////////////////////

#include<bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
#define mod 1000000007
#define pb push_back
#define ff first
#define ss second
#define ii pair<int,int>
#define vi vector<int>
#define vii vector<ii>
#define lli long long int
#define endl '\n'
 
using namespace std;
vi ar[1001];
vi tr[1001];
 
vi order;
vi SCC;
 
int vis[1001];
 
void dfs(int node)
{
	vis[node] = 1;
 
	for(int child : ar[node])
	if(vis[child] == 0)
	dfs(child);
 
	order.pb(node);
}
 
void dfs1(int node)
{
	vis[node] = 1;
 
	for(int child : tr[node])
	if(vis[child] == 0)
	dfs1(child);
 
	SCC.pb(node);
}
 
int main()
{
	int n , a , b , m , t;
	cin>>t;
 
	while(t--)
	{
		cin>>n>>m;
		REP(i , n) ar[i].clear() , tr[i].clear() , vis[i] = 0;
		order.clear();
 
		REP(i , m)
		{
			cin>>a>>b;
			ar[a].pb(b);
			tr[b].pb(a);
		}
 
		REP(i , n)
		if(vis[i] == 0) dfs(i);
 
		REP(i , n) vis[i] = 0;
 
		REP(i , n)
		if(vis[order[n-i]] == 0)
		{
			SCC.clear();
			dfs1(order[n - i]);
 
			cout<<"dfs1() called from "<<order[n-i]<<" and printing SCC"<<endl;
			for(int node : SCC)
			cout<<node<<" ";
			cout<<endl;
		}
	}
}
 ............................................................................
 				OR
.............................................................................

#include<bits/stdc++.h>
using namespace std;

vector<int> ar[100];
vector<int> tr[100];
int visited[100];
vector<int> order;
vector<int> scc;

void dfs(int node)
{
	visited[node]=1;
	
	for(auto child:ar[node])
	if(visited[child]==0)
	dfs(child);
	
	order.push_back(node);
}

void dfs1(int node)
{
	visited[node]=1;
	for(auto child : tr[node])
	if(visited[child]==0)
	dfs1(child);
	
	scc.push_back(node); 
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{	
		int n,m;
		cin>>n>>m;
		for(int i=1;i<=n;i++)
		ar[i].clear(),tr[i].clear(),visited[i]=0;
		order.clear();
		for(int i=0;i<m;i++)
		{
		int a,b;
		cin>>a>>b;
		ar[a].push_back(b);
		tr[b].push_back(a);
		}
		for(int i=1;i<=n;i++)
		if(visited[i]==0)
		dfs(i);
		
		for(int i=1;i<=n;i++)
		visited[i]=0;
		int i=1;
		reverse(order.begin(),order.end());
		for(auto  x : order)
		{	scc.clear();
			if(visited[x]==0)
			{
				dfs1(x);
				
				cout<<"strongly connected component "<<i<<" is\n";
				for(auto y: scc)
				cout<<y<<" ";
				cout<<endl;
				i++;
			}
		}
		
	}
	
}

/////////////////////////////////////////////////// Kruskal's Algorithm /////////////////////////////////////////////////////////
(using path compression)(not by union by rank)
#include<bits/stdc++.h>
using namespace std;

struct edge
{
	int a;
	int b;
	int w;
};
edge ar[100001];
int parent[10001];

bool comp(edge a,edge b)
{
	if(a.w<b.w)
	return true;
	
	return false;
}
int find(int a)
{
	if(parent[a]==-1)
	return a;
	
	return parent[a]=find(parent[a]);
}
void merge(int a,int b)
{
	parent[a]=b;
}
int main()
{
	int n,m,a,b,w,sum=0;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	parent[i]=-1;
	for(int i=0;i<m;i++)
	{
		cin>>ar[i].a>>ar[i].b>>ar[i].w;
	}
	sort(ar,ar+m,comp);
	
	for(int i=0;i<m;i++)
	{
		a=find(ar[i].a);
		b=find(ar[i].b);
		if(a != b)
		{
			sum+=ar[i].w;
			merge(a,b);
		}
	}
	cout<<sum<<endl;
}

///////////////////////////////////////////////////////////Lowest Common Ancestor//////////////////////////////////////////////////////////////
..........................................................
	  Novice Approach O(n) time & O(n) space
..........................................................

1) finding the difference between levels of two node.
2) move the bottom node to up till both nodes have same levels.
3) move both node up untill their parents become equal.

int LCA(int a,int b)
{
	int d = level[b]-level[a];
	while(d>0)
	{
		b=parent[b];
		d--;
	}
	if(a==b)
	return a;
	
	while(parent[a] != parent[b])
	{
		a=parent[a];
		b=parent[b];
	}
	return parent[a];
}

.............................................................
	     Binary Lifting O() time O() space
.............................................................





















.................................................................. E N D ...........................................................................
