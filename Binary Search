_______________________________________________________________________________________________________
                                        Binary Search( Log2(n)
_______________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int BinarySearch(int a[],int n,int k)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==k)
		return mid;
		if(a[mid]>k)
		end=mid-1;
		else
		start=mid+1;
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	
	int k;
	cin>>k;
	int res=BinarySearch(a,n,k);
	if(res==-1)
	cout<<"Element not found";
	else
	cout<<"Element found at "<<res;
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                            Binary Search on Descending Sorted Array
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int DescBinarySearch(int a[],int n,int k)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==k)
		return mid;
		if(a[mid]>k)
		start=mid+1;
		else
		end=mid-1;
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	
	int k;
	cin>>k;
	int res=DescBinarySearch(a,n,k);
	if(res==-1)
	cout<<"Element not found";
	else
	cout<<"Element found at "<<res;
}


___________________________________________________________________________________________________________________________________________________________________________________
                                                        Order Agnostic Search ( Order is not known)
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int BinarySearch(int a[],int n,int k)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==k)
		return mid;
		if(a[mid]>k)
		end=mid-1;
		else
		start=mid+1;
	}
	return -1;
}
int DescBinarySearch(int a[],int n,int k)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==k)
		return mid;
		if(a[mid]>k)
		start=mid+1;
		else
		end=mid-1;
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	
	int k;
	cin>>k;
	if(a[0]>a[1])
	{
	int res=DescBinarySearch(a,n,k);
	if(res==-1)
	cout<<"Element not found";
	else
	cout<<"Element found at "<<res;
	}
	else
	{		
	int res=BinarySearch(a,n,k);
	if(res==-1)
	cout<<"Element not found";
	else
	cout<<"Element found at "<<res;
	}
}


___________________________________________________________________________________________________________________________________________________________________________________
                                                        First and Last Occurance of an element
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int binary_first(int a[],int n,int x)
{
	int res=-1;
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==x)
		{
			res=mid;
			end=mid-1;
		}
		else if(a[mid]<x)
		start=mid+1;
		else
		end=mid-1;
	}
	return res;
}
int binary_last(int a[],int n,int x)
{
	int res=-1;
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==x)
		{
			res=mid;
			start=mid+1;
		}
		else if(a[mid]<x)
		start=mid+1;
		else
		end=mid-1;
	}
	return res;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int x;
	cin>>x;
	cout<<binary_first(a,n,x)<<endl;
	cout<<binary_last(a,n,x);
}


___________________________________________________________________________________________________________________________________________________________________________________
                                                        Count of an Element in a Sorted Array
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int binary_first(int a[],int n,int x)
{
	int res=-1;
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==x)
		{
			res=mid;
			end=mid-1;
		}
		else if(a[mid]<x)
		start=mid+1;
		else
		end=mid-1;
	}
	return res;
}
int binary_last(int a[],int n,int x)
{
	int res=-1;
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==x)
		{
			res=mid;
			start=mid+1;
		}
		else if(a[mid]<x)
		start=mid+1;
		else
		end=mid-1;
	}
	return res;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int x;
	cin>>x;
	int first=binary_first(a,n,x);
	int last=binary_last(a,n,x);
	cout<<last-first+1;
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                       Number of Times a Sorted array is Rotated
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int noOfRotation(int a[],int n)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		if(a[start]<a[end])
		return start;
		
		int mid=start+(end-start)/2;
		int prev=(mid+n-1)%n;
		int next=(mid+1)%n;
		if(a[mid]<a[prev] && a[mid]<a[next])
		return mid;
		if(a[mid]<a[end])
		end=mid-1;
		else
		start=mid+1;
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	cout<<noOfRotation(a,n);
}


___________________________________________________________________________________________________________________________________________________________________________________
                                                        Find an Element in a Rotated Sorted Array
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int BinarySearch(int a[],int start,int end,int k)
{
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==k)
		return mid;
		
		if(a[mid]<k)
		start=mid+1;
		else
		end=mid-1;
	}
	return -1;
}
int noOfRotation(int a[],int n)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		if(a[start]<a[end])
		return start;
		
		int mid=start+(end-start)/2;
		int prev=(mid+n-1)%n;
		int next=(mid+1)%n;
		if(a[mid]<a[prev] && a[mid]<a[next])
		return mid;
		if(a[mid]<a[end])
		end=mid-1;
		else
		start=mid+1;
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int k;
	cin>>k;
	int mid=noOfRotation(a,n);
	int index1=BinarySearch(a,0,mid-1,k);
	int index2=BinarySearch(a,mid,n,k);
	if(index1==-1 && index2==-1)
	cout<<"Element not present"<<endl;
	else if(index1==-1)
	cout<<"Element "<<k<<" is found at "<<index2<<endl;
	else
	cout<<"Element "<<k<<" is found at "<<index1<<endl;
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Searching in a Nearly Sorted Array
		(An element that is supposed to be at ith position, it may actually present at (i-1)th postion or at ith position or at (i+1)th position)
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int BinarySearchInNearlySortedArray(int a[],int start,int end,int k)
{
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==k)
		return mid;
		
		if(mid+1<=end && a[mid+1]==k)
		return mid+1;
		
		if(mid-1>=start && a[mid-1==k])
		return mid-1;
		
		if(a[mid]<k)
		start=mid+2;
		else
		end=mid-2;
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int k;
	cin>>k;
	cout<<BinarySearchInNearlySortedArray(a,0,n-1,k);
}


___________________________________________________________________________________________________________________________________________________________________________________
                                                        Find Floor of an element in a Sorted Array
						       (Largest Element Smaller than or equal to given element)
___________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;

int floorOfAnElementInASortedArray(int a[],int start,int end,int k)
{
	int res=0;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]<=k)
		{
			res=a[mid];
			start=mid+1;
		}
		
		if(a[mid]<k)
		start=mid+1;
		else
		end=mid-1;
	}
	return res;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int k;
	cin>>k;
	cout<<floorOfAnElementInASortedArray(a,0,n-1,k);
}


___________________________________________________________________________________________________________________________________________________________________________________
                                                        Ceil of an element in a Sorted Array
					     (Smallest element greater than or equal to given element)
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int ceilOfAnElementInASortedArray(int a[],int start,int end,int k)
{
	int res=0;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]>=k)
		{
			res=a[mid];
			end=mid-1;
		}
		
		if(a[mid]<k)
		start=mid+1;
		else
		end=mid-1;
	}
	return res;
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int k;
	cin>>k;
	cout<<ceilOfAnElementInASortedArray(a,0,n-1,k);
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Next Alphabetical Element
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

char NextLetter(string s,char key)
{
	int start=0,end=s.length()-1;
	char res='#';
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(s[mid]==key)
		start=mid+1;
		else if(s[mid]<key)
		start=mid+1;
		else
		{
			end=mid-1;
			res=s[mid];
		}
	}
	return res;
}
int main()
{
	string s;
	cin>>s;
	char key;
	cin>>key;
	char res=NextLetter(s,key);
	if(res=='#')
	cout<<"next letter not present";
	else
	cout<<"next letter is "<<res;
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Find position of an element in an Infinite Sorted Array
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int BinarySearch(int a[],int start,int end,int key)
{
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==key)
		return mid;
		if(a[mid]>key)
		end=mid-1;
		else
		start=mid+1;
	}
	return -1;
}
int BinarySearchInInfiniteSortedArray(int a[],int n,int key)
{
	int start=0;
	int end=1;
	while(a[end]<key)
	{
		start=end;
		end=2*end;
	}
	return BinarySearch(a,start,end,key);
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int key;
	cin>>key;
	cout<<BinarySearchInInfiniteSortedArray(a,n,key);
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Index of First 1 in a Binary Sorted Infinite Array
___________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;

int BinarySearchFirstPosition1(int a[],int start,int end)
{
	int res=-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==1)
		{
			res=mid;
			end=mid-1;
		}
		else
		start=mid+1;
	}
	return res;
}
int BinarySearchInInfiniteBinarySortedArray(int a[],int n)
{
	int start=0;
	int end=1;
	while(a[end]<1)
	{
		start=end;
		end=2*end;
	}
	return BinarySearchFirstPosition1(a,start,end);
}
int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	cout<<BinarySearchInInfiniteBinarySortedArray(a,n);
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Minimum Difference Element in a Sorted Array
___________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;

int minDifference(int a[],int n,int key)
{
	int start=0;
	int end=n-1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==key)
		return 0;
		if(a[mid]>key)
		end=mid-1;
		else
		start=mid+1;
	}
	
	return min(abs(key-a[end]),abs(key-a[start]));
}

int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int key;
	cin>>key;
	cout<<minDifference(a,n,key);
}
___________________________________________________________________________________________________________________________________________________________________________________
                                                        Peak Element(An element greater than its both neighbuor)
							(can have multiple peak element)
___________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;

int peakElement(int a[],int start,int end)
{
	int n=end+1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(mid>0 && mid<n-1)
		{
			if(a[mid]>a[mid-1] && a[mid]>a[mid+1])
			return a[mid];
			if(a[mid-1]>a[mid])
			end=mid-1;
			else
			start=mid+1;
		}
		else if(mid==0 )
		{
			if(a[mid]>a[mid+1])
			return a[mid];
			else
			start=mid+1;
		}
		else
		{
			if(a[mid-1]<a[mid])
			return a[mid];
			else
			end=mid-1;
		}
	}
	
	return -1;
}

int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	cout<<peakElement(a,0,n-1);
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Find maximum element in Bitonic Array
							  (can have only one peak element)
					   (Monotonically increasing and then Monotonically decreasing)
					   (Bitonic array is not same as Rotated Sorted array as 
					   1)if we rotate rotate Rotated Sorted Array ,it will become sorted array.
					   2)if we rotate Bitonic array, it will never become sorted array)
___________________________________________________________________________________________________________________________________________________________________________________
 Code same as peak element
 
___________________________________________________________________________________________________________________________________________________________________________________
                                                        Search An Element in Bitonic Array
___________________________________________________________________________________________________________________________________________________________________________________

#include<bits/stdc++.h>
using namespace std;

int bs(int a[],int start,int end,int key)
{
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==key)
		return mid;
		if(a[mid]>key)
		end=mid-1;
		else
		start=mid+1;
	}
	return -1;
}
int rbs(int a[],int start,int end,int key)
{
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(a[mid]==key)
		return mid;
		if(a[mid]>key)
		start=mid+1;
		else
		end=mid-1;
	}
	return -1;
}
int maxElementInBitonicArray(int a[],int start,int end)
{
	int n=end+1;
	while(start<=end)
	{
		int mid=start+(end-start)/2;
		if(mid>0 && mid<n-1)
		{
			if(a[mid]>a[mid-1] && a[mid]>a[mid+1])
			return mid;
			if(a[mid-1]>a[mid])
			end=mid-1;
			else
			start=mid+1;
		}
		else if(mid==0 )
		{
			if(a[mid]>a[mid+1])
			return mid;
			else
			start=mid+1;
		}
		else
		{
			if(a[mid-1]<a[mid])
			return mid;
			else
			end=mid-1;
		}
	}
	
	return -1;
}

int main()
{
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++)
	cin>>a[i];
	int key;
	cin>>key;
	int peak=maxElementInBitonicArray(a,0,n-1);
	int index1=bs(a,0,peak-1,key);
	int index2=rbs(a,peak,n-1,key);
	
	if(index1 ==-1 &&index2==-1)
	cout<<"Element not present";
	else 
	cout<<"element present";
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Search in Row wise And Column wise Sorted Array
									O(m+n)
___________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;
const int m=4,n=4;
int Search(int a[][n],int key)
{
	int i=0;
	int j=n-1;
	while(i<n && j>=0)
	{
		if(a[i][j]==key)
		return 1;
		if(a[i][j]>key)
		j--;
		else
		i++;	
	}
	return -1;	
}

int main()
{
	int a[m][n];
	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		cin>>a[i][j];
	}
	int key;
	cin>>key;
	int x=Search(a,key);
	if(x==-1)
	cout<<"Element not present";
	else
	cout<<"Element present";
}

___________________________________________________________________________________________________________________________________________________________________________________
                                                        Allocate Minimum Number Of Pages
___________________________________________________________________________________________________________________________________________________________________________________
